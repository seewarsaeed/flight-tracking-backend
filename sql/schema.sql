create table Role (Role_ID int generated by default as identity primary key , Role_Name varchar(50));


create table Users (User_ID int generated by default as identity primary key , User_Name varchar(100) unique , password varchar(100) , First_Name varchar(50) , Last_Name varchar(50) , Image_Name varchar(255) , Email varchar(100) , Role_ID int , foreign key (Role_ID) references Role(Role_ID) on delete cascade);

create table Bank (Card_ID int generated by default as identity primary key , CVV varchar(3) , Expire_Date date , Balance float , status varchar(50));

create table Payment(Payment_ID int generated by default as identity primary key , Card_ID int , User_ID int ,
foreign key (Card_ID) references Bank(Card_ID) on delete cascade ,foreign key (User_ID) references Users (User_ID) on delete cascade);


create table Testimonial (Testimonial_ID int generated by default as identity primary key , Name varchar(100) , Feedback varchar(500) , status varchar(50) , User_ID int ,
foreign key (User_ID) references Users (User_ID) on delete cascade);

create table Airport(Airport_ID int generated by default as identity primary key , Airport_Name varchar(150) ,Location varchar(150));


create table Flight (Flight_ID int generated by default as identity primary key ,Flight_Name varchar(100) , Price float , NumberOfEmptySeats int ,
NumberOfReservedSeats int , Departure_dateTime date , Arrival_dateTime date , Arrival_status varchar(50) , AdditionalCost float ,Image_Name varchar(255) , 
Departure_Airport_ID int , Arrival_Airport_ID int,foreign key (Departure_Airport_ID) references Airport(Airport_ID) on delete cascade , foreign key (Arrival_Airport_ID) references Airport(Airport_ID) on delete cascade);


create table ReservedFlights (Reserved_Flights_ID int generated by default as identity primary key , Reservation_Date date , Paid_Status varchar(50), Email_Status varchar(50) , NumberOfSeats int , Flight_ID int , User_ID int , foreign key (User_ID) references Users (User_ID) on delete cascade , foreign key (Flight_ID) references Flight (Flight_ID) on delete cascade);

create table Header(Header_ID int generated by default as identity primary key , Header_Logo varchar(255) , Header_Title varchar(50) , Website_Name varchar(50));

create table ContactUs(Contact_US_ID int generated by default as identity primary key , Name varchar(100) , Email varchar(100) , Subject varchar(100) , Message varchar(2000));


create table Footer(Footer_ID int generated by default as identity primary key , Logo varchar(255) , Brief varchar(2000) ,Location varchar(50) ,Email varchar(100) , Phone_Number varchar(25) , LinksTitle varchar(255) , CopyRight varchar(255));

create table AboutUs(About_US_ID int generated by default as identity primary key , Image_Name varchar(255) , Description varchar(2000) , Title varchar(50) );

create table Background(Background_ID int generated by default as identity primary key , Image_Name varchar(255) , Description varchar(2000));


create table Home(Home_ID int generated by default as identity primary key , Header_ID int , About_US_ID int , Contact_US_ID int , Footer_ID int , Admin_User_ID int , Background_ID int ,
foreign key (Admin_User_ID) references Users (User_ID) on delete cascade , foreign key (Header_ID) references Header (Header_ID) on delete cascade , foreign key (About_US_ID) references AboutUs (About_US_ID) on delete cascade ,
foreign key (Contact_US_ID) references ContactUs (Contact_US_ID) on delete cascade , foreign key (Footer_ID) references Footer (Footer_ID) on delete cascade , foreign key (Background_ID) references Background (Background_ID) on delete cascade);

ALTER TABLE ReservedFlights
MODIFY (Paid_status VARCHAR2(30) DEFAULT 'false');
ALTER TABLE ReservedFlights
MODIFY (Email_status VARCHAR2(30) DEFAULT 'false');
ALTER TABLE Testimonial
MODIFY (status VARCHAR2(30) DEFAULT 'false');
ALTER TABLE Flight
MODIFY (ARRIVAL_STATUS VARCHAR2(30) DEFAULT 'false');


CREATE OR REPLACE PACKAGE AboutUsPackage AS 
 PROCEDURE GetAllAboutUs; 
 PROCEDURE CreateAboutUs(Image_NamePKG IN VARCHAR, DescriptionPKG IN 
VARCHAR, TitlePKG IN VARCHAR); 
 PROCEDURE UpdateAboutUs(ID IN INT, Image_NamePKG IN VARCHAR, DescriptionPKG IN 
VARCHAR, TitlePKG IN VARCHAR); 
 PROCEDURE DeleteAboutUs(ID IN INT); 
 PROCEDURE GetAboutUsById(ID IN INT); 
END AboutUsPackage; 
-- AboutUs Body 
CREATE OR REPLACE PACKAGE BODY AboutUsPackage AS 
 PROCEDURE GetAllAboutUs IS 
 c_all sys_refcursor; 
 BEGIN 
 OPEN c_all FOR 
 SELECT * FROM AboutUs; 
 DBMS_SQL.RETURN_RESULT(c_all); 
 END GetAllAboutUs; 
 PROCEDURE CreateAboutUs(Image_NamePKG IN VARCHAR, DescriptionPKG IN 
VARCHAR, TitlePKG IN VARCHAR) IS 
id number;
 BEGIN 
 INSERT INTO AboutUs VALUES (DEFAULT ,Image_NamePKG, DescriptionPKG, TitlePKG); 
 COMMIT; 
 END CreateAboutUs; 
 PROCEDURE UpdateAboutUs(ID IN INT, Image_NamePKG IN VARCHAR, DescriptionPKG IN 
VARCHAR, TitlePKG IN VARCHAR) IS 
 BEGIN 
 UPDATE AboutUs
 SET 
 Image_Name = Image_NamePKG, 
 Description = DescriptionPKG, 
 Title = TitlePKG 
 WHERE 
 About_US_ID = ID; 
 COMMIT; 
 END UpdateAboutUs; 
 PROCEDURE DeleteAboutUs(ID IN INT) IS 
 BEGIN 
 DELETE FROM AboutUs WHERE About_US_ID = ID; 
 COMMIT; 
 END DeleteAboutUs; 
 PROCEDURE GetAboutUsById(ID IN INT) AS 
 c_all sys_refcursor; 
 BEGIN 
 OPEN c_all FOR 
 SELECT * FROM AboutUs WHERE About_US_ID = ID; 
 DBMS_SQL.RETURN_RESULT(c_all); 
 END GetAboutUsById; 
END AboutUsPackage;


CREATE OR REPLACE PACKAGE Airport_Package
AS
PROCEDURE GetAllAirports;
PROCEDURE GetAirportById(ID IN INT);
PROCEDURE CreateAirport(AirportName  IN Airport.Airport_Name%TYPE,Airport_Location  IN Airport.Location%TYPE);
PROCEDURE UpdateAirport(ID IN INT,AirportName  IN Airport.Airport_Name%TYPE,Airport_Location  IN Airport.Location%TYPE);
PROCEDURE DeleteAirport(ID IN INT);
PROCEDURE NumberOfAirports(OUT_Result OUT NUMBER);
END Airport_Package;

create or replace Package BODY Airport_Package
As
PROCEDURE GetAllAirports
As
cur_all SYS_REFCURSOR ;
Begin 
open cur_all for
Select * From Airport ;
Dbms_sql.return_result(cur_all);
End GetAllAirports ;


PROCEDURE GetAirportById(ID IN INT)
As
Cur_item SYS_REFCURSOR;
Begin
open cur_item for
select * from Airport
where Airport_ID = ID;
Dbms_sql.return_result(cur_item);
End GetAirportById;

PROCEDURE CreateAirport(AirportName  IN Airport.Airport_Name%TYPE,Airport_Location  IN Airport.Location%TYPE)
AS
id number;
BEGIN 
INSERT INTO Airport VALUES (DEFAULT , AirportName , Airport_Location);
COMMIT;
END CreateAirport;

PROCEDURE UpdateAirport(ID IN INT,AirportName  IN Airport.Airport_Name%TYPE,Airport_Location  IN Airport.Location%TYPE)
AS
BEGIN
UPDATE Airport  
SET Airport_Name = AirportName , Location = Airport_Location 
WHERE Airport_ID = ID ;
COMMIT;
END UpdateAirport;

PROCEDURE DeleteAirport(ID IN INT)
As
Begin
delete from Airport
where Airport_ID = ID  ;
commit;
End DeleteAirport;

PROCEDURE NumberOfAirports(OUT_Result OUT NUMBER)
AS
BEGIN
  SELECT COUNT(*) INTO OUT_Result FROM Airport;
END NumberOfAirports;
End Airport_Package;



CREATE OR REPLACE PACKAGE BackgroundPackage AS 
 PROCEDURE GetAllBackground; 
 PROCEDURE CreateBackground(Image_NamePKG IN VARCHAR, DescriptionPKG IN 
VARCHAR); 
 PROCEDURE UpdateBackground(ID IN INT, Image_NamePKG IN VARCHAR, DescriptionPKG IN 
VARCHAR); 
 PROCEDURE DeleteBackground(ID IN INT); 
 PROCEDURE GetBackgroundById(ID IN INT); 
END BackgroundPackage; 
-- Background Body 
CREATE OR REPLACE PACKAGE BODY BackgroundPackage AS 
 PROCEDURE GetAllBackground IS 
 c_all sys_refcursor; 
 BEGIN 
 OPEN c_all FOR 
 SELECT * FROM Background; 
 DBMS_SQL.RETURN_RESULT(c_all); 
 END GetAllBackground; 
 
 PROCEDURE CreateBackground(Image_NamePKG IN VARCHAR, DescriptionPKG IN 
VARCHAR) IS 
id number;
 BEGIN 
 INSERT INTO Background VALUES (DEFAULT ,Image_NamePKG, DescriptionPKG); 
 COMMIT; 
 END CreateBackground; 
 
 PROCEDURE UpdateBackground(ID IN INT, Image_NamePKG IN VARCHAR, DescriptionPKG IN 
VARCHAR) IS 
 BEGIN 
 UPDATE Background 
 SET 
 Image_Name = Image_NamePKG, 
 Description = DescriptionPKG 
 WHERE 
 Background_ID = ID; 
 COMMIT; 
 END UpdateBackground; 
 
 PROCEDURE DeleteBackground(ID IN INT) IS 
 BEGIN 
 DELETE FROM Background WHERE Background_ID = ID; 
 COMMIT; 
 END DeleteBackground; 
 
 PROCEDURE GetBackgroundById(ID IN INT) AS 
 c_all sys_refcursor; 
 BEGIN 
 OPEN c_all FOR 
 SELECT * FROM Background WHERE Background_ID = ID; 
 DBMS_SQL.RETURN_RESULT(c_all); 
 END GetBackgroundById; 
END BackgroundPackage;


CREATE OR REPLACE PACKAGE Bank_Package
AS
PROCEDURE GetAllBanks;
PROCEDURE GetBankById(ID IN INT);
PROCEDURE CreateBank(card_CVV  IN Bank.CVV%TYPE, Expire_Date IN Date , Card_Balance IN  Bank.Balance%TYPE,status IN varchar);
PROCEDURE UpdateBank(ID IN INT,card_CVV  IN Bank.CVV%TYPE, Expire_Date IN Date , Card_Balance IN  Bank.Balance%TYPE,status IN varchar);
PROCEDURE DeleteBank(ID IN INT);
END Bank_Package;


create or replace Package BODY Bank_Package
As
PROCEDURE GetAllBanks
As
cur_all SYS_REFCURSOR ;
Begin 
open cur_all for
Select * From Bank ;
Dbms_sql.return_result(cur_all);
End GetAllBanks ;

PROCEDURE GetBankById(ID IN INT)
As
Cur_item SYS_REFCURSOR;
Begin
open cur_item for
select * from Bank
where Card_ID = ID;
Dbms_sql.return_result(cur_item);
End GetBankById;

PROCEDURE CreateBank(card_CVV  IN Bank.CVV%TYPE, Expire_Date IN Date , Card_Balance IN  Bank.Balance%TYPE,status IN varchar)
AS
id number;
BEGIN 
INSERT INTO Bank VALUES (DEFAULT , card_CVV , Expire_Date , Card_Balance ,status);
COMMIT;
END CreateBank;


PROCEDURE UpdateBank(ID IN INT,card_CVV  IN Bank.CVV%TYPE, Expire_Date IN Date , Card_Balance IN  Bank.Balance%TYPE,status IN varchar)
AS
BEGIN
UPDATE Bank  
SET CVV = card_CVV ,  Expire_Date = Expire_Date , Balance = Card_Balance ,status=status
WHERE Card_ID = ID ;
COMMIT;
END UpdateBank;

PROCEDURE DeleteBank(ID IN INT)
As
Begin
delete from Bank
where Card_ID = ID  ;
commit;
End DeleteBank;

End Bank_Package;




CREATE OR REPLACE PACKAGE ContactUsPackage AS 
 PROCEDURE GetAllContactUs; 
 PROCEDURE CreateContactUs(NamePKG IN VARCHAR, EmailPKG IN VARCHAR, 
SubjectPKG IN VARCHAR, MessagePKG IN VARCHAR); 
 PROCEDURE UpdateContactUs(ID IN INT, NamePKG IN VARCHAR, EmailPKG IN 
VARCHAR, SubjectPKG IN VARCHAR, MessagePKG IN VARCHAR); 
 PROCEDURE DeleteContactUs(ID IN INT); 
 PROCEDURE GetContactUsById(ID IN INT); 
END ContactUsPackage; 

 
-- ContactUs Body 
CREATE OR REPLACE PACKAGE BODY ContactUsPackage AS 
 PROCEDURE GetAllContactUs IS 
 c_all sys_refcursor; 
 BEGIN 
 OPEN c_all FOR 
 SELECT * FROM ContactUs; 
 DBMS_SQL.RETURN_RESULT(c_all); 
 END GetAllContactUs; 
 
 PROCEDURE CreateContactUs(NamePKG IN VARCHAR, EmailPKG IN VARCHAR, 
SubjectPKG IN VARCHAR, MessagePKG IN VARCHAR) IS 
id number;
 BEGIN 
 INSERT INTO ContactUs VALUES (DEFAULT ,NamePKG, EmailPKG, SubjectPKG, MessagePKG); 
 COMMIT; 
 END CreateContactUs; 
 
 PROCEDURE UpdateContactUs(ID IN INT, NamePKG IN VARCHAR, EmailPKG IN 
VARCHAR, SubjectPKG IN VARCHAR, MessagePKG IN VARCHAR) IS 
 BEGIN 
 UPDATE ContactUs 
 SET 
 Name = NamePKG, 
 Email = EmailPKG, 
 Subject = SubjectPKG, 
 Message = MessagePKG 
 WHERE 
 Contact_US_ID = ID; 
 COMMIT; 
 END UpdateContactUs; 
 
 PROCEDURE DeleteContactUs(ID IN INT) IS 
 BEGIN 
 DELETE FROM ContactUs WHERE Contact_US_ID = ID; 
 COMMIT; 
 END DeleteContactUs; 
 
 PROCEDURE GetContactUsById(ID IN INT) AS 
 c_all sys_refcursor; 
 BEGIN 
 OPEN c_all FOR 
 SELECT * FROM ContactUs WHERE Contact_US_ID = ID; 
 DBMS_SQL.RETURN_RESULT(c_all); 
 END GetContactUsById; 
END ContactUsPackage;



CREATE OR REPLACE PACKAGE FooterPackage AS 
 PROCEDURE GetAllFooter; 
 PROCEDURE CreateFooter(LogoPKG IN VARCHAR, BriefPKG IN VARCHAR, LocationPKG 
IN VARCHAR, EmailPKG IN VARCHAR, Phone_NumberPKG IN VARCHAR, LinksTitlePKG 
IN VARCHAR, CopyRightPKG IN VARCHAR); 
 PROCEDURE UpdateFooter(ID IN INT, LogoPKG IN VARCHAR, BriefPKG IN VARCHAR, 
LocationPKG IN VARCHAR, EmailPKG IN VARCHAR, Phone_NumberPKG IN VARCHAR, 
LinksTitlePKG IN VARCHAR, CopyRightPKG IN VARCHAR); 
 PROCEDURE DeleteFooter(ID IN INT); 
 PROCEDURE GetFooterById(ID IN INT); 
END FooterPackage; 

-- Footer Body 
CREATE OR REPLACE PACKAGE BODY FooterPackage AS 
 PROCEDURE GetAllFooter IS 
 c_all sys_refcursor; 
 BEGIN 
 OPEN c_all FOR 
 SELECT * FROM Footer; 
 DBMS_SQL.RETURN_RESULT(c_all); 
 END GetAllFooter; 
 
 PROCEDURE CreateFooter(LogoPKG IN VARCHAR, BriefPKG IN VARCHAR, LocationPKG 
IN VARCHAR, EmailPKG IN VARCHAR, Phone_NumberPKG IN VARCHAR, LinksTitlePKG 
IN VARCHAR, CopyRightPKG IN VARCHAR) IS 
id number;
 BEGIN 
 INSERT INTO Footer VALUES (DEFAULT ,LogoPKG, BriefPKG, LocationPKG, EmailPKG, 
Phone_NumberPKG, LinksTitlePKG, CopyRightPKG); 
 COMMIT; 
 END CreateFooter; 
 
 PROCEDURE UpdateFooter(ID IN INT, LogoPKG IN VARCHAR, BriefPKG IN VARCHAR, 
LocationPKG IN VARCHAR, EmailPKG IN VARCHAR, Phone_NumberPKG IN VARCHAR, 
LinksTitlePKG IN VARCHAR, CopyRightPKG IN VARCHAR) IS 
 BEGIN 
 UPDATE Footer 
 SET 
 Logo = LogoPKG, 
 Brief = BriefPKG, 
 Location = LocationPKG, 
 Email = EmailPKG, 
 Phone_Number = Phone_NumberPKG, 
 LinksTitle = LinksTitlePKG, 
 CopyRight = CopyRightPKG 
 WHERE 
 Footer_ID = ID; 
 COMMIT; 
 END UpdateFooter; 
 
 PROCEDURE DeleteFooter(ID IN INT) IS 
 BEGIN 
 DELETE FROM Footer WHERE Footer_ID = ID; 
 COMMIT; 
 END DeleteFooter; 
 
 PROCEDURE GetFooterById(ID IN INT) AS 
 c_all sys_refcursor; 
 BEGIN 
 OPEN c_all FOR 
 SELECT * FROM Footer WHERE Footer_ID = ID; 
 DBMS_SQL.RETURN_RESULT(c_all); 
 END GetFooterById; 
END FooterPackage
;



CREATE OR REPLACE PACKAGE HeaderPackage AS 
 PROCEDURE GetAllHeader; 
 PROCEDURE GetHeaderById(ID IN INT); 
 PROCEDURE CreateHeader(Logo IN VARCHAR, Title IN VARCHAR, WebsiteName IN 
VARCHAR ); 
 PROCEDURE UpdateHeader(ID IN INT,Logo IN VARCHAR, Title IN VARCHAR, 
WebsiteName IN VARCHAR ); 
 PROCEDURE DeleteHeader(ID IN INT); 
END HeaderPackage; 

-- Header Body 
CREATE OR REPLACE PACKAGE BODY HeaderPackage AS 
 PROCEDURE GetAllHeader IS 
c_all SYS_REFCURSOR; 
 BEGIN 
 OPEN c_all FOR 
 SELECT * FROM Header; 
 DBMS_SQL.RETURN_RESULT(c_all); 
 END GetAllHeader; 
 PROCEDURE GetHeaderById(ID IN INT) IS 
c_all SYS_REFCURSOR; 
 BEGIN 
 OPEN c_all FOR 
 SELECT * FROM Header WHERE Header_ID = ID; 
 DBMS_SQL.RETURN_RESULT(c_all); 
 END GetHeaderById; 
 PROCEDURE CreateHeader( 
Logo IN VARCHAR, 
Title IN VARCHAR, 
WebsiteName IN VARCHAR 
) IS 
id number;
 BEGIN 
 INSERT INTO Header VALUES (DEFAULT ,Logo, Title , WebsiteName); 
 COMMIT; 
 END CreateHeader; 
 PROCEDURE UpdateHeader( 
ID IN INT,
Logo IN VARCHAR, 
Title IN VARCHAR, 
WebsiteName IN VARCHAR
 ) IS 
 BEGIN 
 UPDATE Header 
 SET 
 Header_Logo = Logo, 
 Header_Title = Title, 
 Website_Name = WebsiteName
 WHERE 
 Header_ID = ID; 
 COMMIT; 
 END UpdateHeader; 
 PROCEDURE DeleteHeader(ID IN INT) IS 
 BEGIN 
 DELETE FROM Header WHERE Header_ID = ID; 
COMMIT; 
 END DeleteHeader; 
END HeaderPackage;




CREATE OR REPLACE PACKAGE Payment_Package
AS
PROCEDURE GetAllPayments;
PROCEDURE GetPaymentById(ID IN INT);
PROCEDURE CreatePayment(CardID  IN INT, UserID IN INT);
PROCEDURE UpdatePayment(ID IN INT,CardID  IN INT, UserID IN INT);
PROCEDURE DeletePayment(ID IN INT);
END Payment_Package;


create or replace Package BODY Payment_Package
As
PROCEDURE GetAllPayments
As
cur_all SYS_REFCURSOR ;
Begin 
open cur_all for
Select * From Payment ;
Dbms_sql.return_result(cur_all);
End GetAllPayments ;

PROCEDURE GetPaymentById(ID IN INT) 
As
Cur_item SYS_REFCURSOR;
Begin
open cur_item for
select * from Payment
where Payment_ID = ID;
Dbms_sql.return_result(cur_item);
End GetPaymentById;

PROCEDURE CreatePayment(CardID  IN INT, UserID IN INT)
AS
id number;
BEGIN 
INSERT INTO Payment VALUES (DEFAULT , CardID , UserID );
COMMIT;
END CreatePayment;

PROCEDURE UpdatePayment(ID IN INT,CardID  IN INT, UserID IN INT)
AS
BEGIN
UPDATE Payment  
SET Card_ID=CardID,User_ID=UserID
WHERE Payment_ID = ID ;
COMMIT;
END UpdatePayment;

PROCEDURE DeletePayment(ID IN INT)
As
Begin
delete from Payment
where Payment_ID = ID  ;
commit;
End DeletePayment;

End Payment_Package;


CREATE OR REPLACE PACKAGE Users_Package
AS
PROCEDURE GetAllUsers;
PROCEDURE GetUserById(ID IN INT);
PROCEDURE GetUserByName(name IN varchar);
PROCEDURE CreateUser(User_Name  IN Users.User_Name%TYPE, pass IN Users.password%TYPE , FName IN  Users.First_Name%TYPE,LName IN Users.Last_Name%TYPE,ImageName IN varchar , User_Email IN Users.Email%TYPE ,RoleID IN int);
PROCEDURE UpdateUser(ID IN INT,UserName  IN Users.User_Name%TYPE, pass IN Users.password%TYPE , FName IN  Users.First_Name%TYPE,LName IN Users.Last_Name%TYPE,ImageName IN varchar , User_Email IN Users.Email%TYPE ,RoleID IN int);
PROCEDURE DeleteUser(ID IN INT);
PROCEDURE NumberOfRegisteredUsers(OUT_Result OUT NUMBER);
PROCEDURE Report;
PROCEDURE User_Login(User_NAME IN VARCHAR,PASS IN VARCHAR);
END Users_Package;


create or replace Package BODY Users_Package
As
PROCEDURE GetAllUsers
As
cur_all SYS_REFCURSOR ;
Begin 
open cur_all for
Select * From Users ;
Dbms_sql.return_result(cur_all);
End GetAllUsers ;


PROCEDURE GetUserById(ID IN INT) 
As
Cur_item SYS_REFCURSOR;
Begin
open cur_item for
select * from Users
where User_ID = ID;
Dbms_sql.return_result(cur_item);
End GetUserById;

PROCEDURE GetUserByName(name IN varchar)
As
Cur_item SYS_REFCURSOR;
Begin
open cur_item for
select * from Users
where USER_NAME = name;
Dbms_sql.return_result(cur_item);
End GetUserByName;


PROCEDURE CreateUser(User_Name  IN Users.User_Name%TYPE, pass IN Users.password%TYPE , FName IN  Users.First_Name%TYPE,LName IN Users.Last_Name%TYPE,ImageName IN varchar , User_Email IN Users.Email%TYPE ,RoleID IN int)
AS
id number;
BEGIN 
INSERT INTO Users VALUES (DEFAULT , User_Name , pass , FName ,LName ,ImageName,User_Email,RoleID );
COMMIT;
END CreateUser;

PROCEDURE UpdateUser(ID IN INT,UserName  IN Users.User_Name%TYPE, pass IN Users.password%TYPE , FName IN  Users.First_Name%TYPE,LName IN Users.Last_Name%TYPE,ImageName IN varchar , User_Email IN Users.Email%TYPE ,RoleID IN int)
AS
BEGIN
UPDATE Users  
SET User_Name = UserName , password = pass , First_Name = FName ,Last_Name=LName,Image_Name=ImageName,Email=User_Email,Role_ID=RoleID
WHERE User_ID = ID ;
COMMIT;
END UpdateUser;

PROCEDURE DeleteUser(ID IN INT)
As
Begin
delete from Users
where User_ID = ID  ;
commit;
End DeleteUser;

PROCEDURE NumberOfRegisteredUsers(OUT_Result OUT NUMBER)
AS
BEGIN
  SELECT COUNT(*) INTO OUT_Result FROM Users;
END NumberOfRegisteredUsers;

PROCEDURE Report
AS
c_all SYS_REFCURSOR;
BEGIN
OPEN c_all FOR
SELECT U.User_Name as userName,
       DepartureAirport.Airport_Name AS departureAirportName,
       DepartureAirport.Location AS departureLocation,
       ArrivalAirport.Airport_Name AS arrivalAirportName,
       ArrivalAirport.Location AS arrivalLocation,
       F.Flight_Name as flightName,
       F.Price,
       F.NumberOfEmptySeats,
       F.NumberOfReservedSeats,
       F.Departure_dateTime AS departureDate,
       F.Arrival_dateTime AS arrivalDate,
       F.AdditionalCost,
       RF.NumberOfSeats,
       RF.Paid_Status as paidStatus
FROM ReservedFlights RF
INNER JOIN Users U ON RF.User_ID = U.User_ID
INNER JOIN Flight F ON RF.Flight_ID = F.Flight_ID
INNER JOIN Airport DepartureAirport ON F.Departure_Airport_ID = DepartureAirport.Airport_ID
INNER JOIN Airport ArrivalAirport ON F.Arrival_Airport_ID = ArrivalAirport.Airport_ID;
DBMS_SQL.RETURN_RESULT(c_all);
END Report;
PROCEDURE User_Login(User_NAME IN VARCHAR,PASS IN VARCHAR)
AS
c_all SYS_REFCURSOR;
BEGIN
open c_all for
SELECT USER_NAME,ROLE_ID ,USER_ID FROM users WHERE USER_NAME=User_NAME 
AND PASSWORD=PASS;
DBMS_SQL.RETURN_RESULT(c_all);
end User_Login;

END Users_Package;


CREATE OR REPLACE PACKAGE Flight_Package
AS
PROCEDURE GetAllFlights;
PROCEDURE GetFlightById(ID IN INT);
PROCEDURE CreateFlight(
    FlightName IN Flight.Flight_Name%TYPE,
    Flight_Price IN Flight.Price%TYPE,
    NumOfEmptySeats IN INT,
    NumOfReservedSeats IN INT,
    Departure_date IN DATE,
    Arrival_date IN DATE,
    Arrival_status IN VARCHAR,
    AdditionCost IN Flight.AdditionalCost%TYPE,
    ImageName IN VARCHAR,
    DepartureAirport_ID IN INT,
    ArrivalAirport_ID IN INT
);
PROCEDURE UpdateFlight(ID IN INT,FlightName  IN Flight.Flight_Name%TYPE,Flight_Price IN Flight.Price%TYPE ,NumOfEmptySeats IN int,NumOfReservedSeats IN int,Departure_date IN Date,Arrival_date IN Date,Arrival_statuss IN varchar,AdditionCost IN Flight.AdditionalCost%TYPE,
ImageName IN varchar,DepartureAirport_ID IN int,ArrivalAirport_ID IN int);
PROCEDURE DeleteFlight(ID IN INT);
PROCEDURE GetFlightsWithMaxReservedSeats;
PROCEDURE GetFlightBetweenInterval(DateFrom in date , DateTo in date);
PROCEDURE GetFlightByName(Search_Name IN VARCHAR);
PROCEDURE SearchFlightsByAirportName(Search_Name IN VARCHAR);
PROCEDURE GetChartData;
END Flight_Package;


create or replace Package BODY Flight_Package
As
PROCEDURE GetAllFlights
As
cur_all SYS_REFCURSOR ;
Begin 
  UPDATE Flight
  SET Arrival_Status = 'true'
  WHERE Arrival_DateTime <= SYSDATE; 
open cur_all for
Select * From Flight ;
Dbms_sql.return_result(cur_all);
   COMMIT;

End GetAllFlights ;
PROCEDURE GetFlightById(ID IN INT) 
As
Cur_item SYS_REFCURSOR;
Begin
open cur_item for
select * from Flight
where Flight_ID = ID;
Dbms_sql.return_result(cur_item);
End GetFlightById;
PROCEDURE CreateFlight(
    FlightName IN Flight.Flight_Name%TYPE,
    Flight_Price IN Flight.Price%TYPE,
    NumOfEmptySeats IN INT,
    NumOfReservedSeats IN INT,
    Departure_date IN DATE,
    Arrival_date IN DATE,
    Arrival_status IN VARCHAR,
    AdditionCost IN Flight.AdditionalCost%TYPE,
    ImageName IN VARCHAR,
    DepartureAirport_ID IN INT,
    ArrivalAirport_ID IN INT
)
AS
    id NUMBER;
BEGIN 
    INSERT INTO Flight VALUES (
        default ,FlightName, Flight_Price, NumOfEmptySeats, NumOfReservedSeats,
        Departure_date, Arrival_date, Arrival_status, AdditionCost,
        ImageName, DepartureAirport_ID, ArrivalAirport_ID
    );

    COMMIT;
END CreateFlight;
PROCEDURE UpdateFlight(ID IN INT,FlightName  IN Flight.Flight_Name%TYPE,Flight_Price IN Flight.Price%TYPE ,NumOfEmptySeats IN int,NumOfReservedSeats IN int,Departure_date IN Date,Arrival_date IN Date,Arrival_statuss IN varchar,AdditionCost IN Flight.AdditionalCost%TYPE,
ImageName IN varchar,DepartureAirport_ID IN int,ArrivalAirport_ID IN int)
AS
BEGIN
UPDATE Flight  
SET Flight_Name=FlightName,Price=Flight_Price,NumberOfEmptySeats=NumOfEmptySeats,NumberOfReservedSeats=NumOfReservedSeats,Departure_dateTime=Departure_date,Arrival_dateTime=Arrival_date,ARRIVAL_STATUS=Arrival_statuss,AdditionalCost=AdditionCost,Image_Name=ImageName,
    Departure_Airport_ID=DepartureAirport_ID,Arrival_Airport_ID=ArrivalAirport_ID
WHERE Flight_ID = ID ;
COMMIT;
END UpdateFlight;
PROCEDURE DeleteFlight(ID IN INT)
As
Begin
delete from Flight
where Flight_ID = ID  ;
commit;
End DeleteFlight;
PROCEDURE GetFlightsWithMaxReservedSeats
As
cur_all SYS_REFCURSOR ;
Begin 
open cur_all for
  SELECT * FROM Flight WHERE NumberOfReservedSeats = (SELECT MAX(NumberOfReservedSeats) FROM Flight);
  Dbms_sql.return_result(cur_all);
END GetFlightsWithMaxReservedSeats;

PROCEDURE GetFlightBetweenInterval(DateFrom in date , DateTo in date)
As
c_all SYS_REFCURSOR ;
Begin
open c_all for 
select * from Flight where Departure_dateTime >= datefrom and Arrival_dateTime <= dateto;
dbms_sql.return_result(c_all);
End GetFlightBetweenInterval;
PROCEDURE GetFlightByName(Search_Name IN VARCHAR)
AS
c_all sys_refcursor;
BEGIN
OPEN c_all for 
SELECT * FROM Flight WHERE(UPPER(Flight_Name) like '%'||UPPER(Search_Name) ||'%');
DBMS_SQL.RETURN_RESULT(c_all);
END GetFlightByName;
PROCEDURE SearchFlightsByAirportName(Search_Name IN VARCHAR)
AS
c_all SYS_REFCURSOR;
BEGIN
OPEN c_all FOR
SELECT f.* FROM Flight f
INNER JOIN Airport dep_airport ON f.Departure_Airport_ID = dep_airport.Airport_ID
INNER JOIN Airport arr_airport ON f.Arrival_Airport_ID = arr_airport.Airport_ID
WHERE (UPPER(dep_airport.Airport_Name) like '%'||UPPER(Search_Name) ||'%')
OR ( UPPER(arr_airport.Airport_Name) like '%' || UPPER(Search_Name) || '%');
DBMS_SQL.RETURN_RESULT(c_all);
END SearchFlightsByAirportName;
 
 
 
PROCEDURE GetChartData AS
  c_all SYS_REFCURSOR;
BEGIN
  OPEN c_all FOR
    SELECT TO_CHAR(Departure_dateTime, 'YYYY-MM') AS MonthYear,
           SUM(NumberOfReservedSeats * Price) AS Profit,
           SUM(NumberOfEmptySeats * Price) AS Loss
    FROM Flight
    GROUP BY TO_CHAR(Departure_dateTime, 'YYYY-MM');
  dbms_sql.return_result(c_all);
END GetChartData;

END Flight_Package;

CREATE OR REPLACE PACKAGE ReservedFlightsPackage AS 
 PROCEDURE GetAllReservedFlights; 
 PROCEDURE GetReservedFlightsById(ID IN INT); 
 PROCEDURE CreateReservedFlights(Dates IN DATE, PaidStatus IN VARCHAR, EmailStatus IN VARCHAR ,NumOfSeats IN 
INT, FlightID IN INT, UserID IN INT); 
 PROCEDURE UpdateReservedFlights(ID IN INT, Dates IN DATE, PaidStatus IN VARCHAR, EmailStatus IN VARCHAR, 
NumOfSeats IN INT, FlightID IN INT, UserID IN INT); 
 PROCEDURE DeleteReservedFlights(ID IN INT); 
END ReservedFlightsPackage;

create or replace PACKAGE BODY ReservedFlightsPackage AS 
 PROCEDURE GetAllReservedFlights IS 
c_all SYS_REFCURSOR; 
 BEGIN 
 OPEN c_all FOR 
 SELECT * FROM ReservedFlights; 
 DBMS_SQL.RETURN_RESULT(c_all); 
 END GetAllReservedFlights; 
 PROCEDURE GetReservedFlightsById(ID IN INT) IS 
c_all SYS_REFCURSOR; 
 BEGIN 
 OPEN c_all FOR 
 SELECT * FROM ReservedFlights WHERE USER_ID = ID; 
 DBMS_SQL.RETURN_RESULT(c_all); 
 END GetReservedFlightsById; 
 PROCEDURE CreateReservedFlights( 
 Dates IN DATE, 
 PaidStatus IN VARCHAR, 
 EmailStatus IN VARCHAR, 
 NumOfSeats IN INT, 
 FlightID IN INT, 
 UserID IN INT 
 ) IS 
id number;
 BEGIN 
 INSERT INTO ReservedFlights VALUES (DEFAULT ,Dates, PaidStatus,EmailStatus, NumOfSeats, FlightID, 
UserID); 
 COMMIT; 
 END CreateReservedFlights;
 PROCEDURE UpdateReservedFlights( 
 ID IN INT, 
 Dates IN DATE, 
 PaidStatus IN VARCHAR,
 EmailStatus IN VARCHAR, 
 NumOfSeats IN INT, 
 FlightID IN INT, 
 UserID IN INT 
 ) IS 
 BEGIN 
 UPDATE ReservedFlights 
 SET 
 Reservation_Date = Dates, 
 Paid_Status = PaidStatus, 
 Email_Status=EmailStatus,
 NumberOfSeats = NumOfSeats, 
 Flight_ID = FlightID, 
 User_ID = UserID 
 WHERE 
 Reserved_Flights_ID = ID; 
 COMMIT; 
 END UpdateReservedFlights; 
 PROCEDURE DeleteReservedFlights(ID IN INT) IS 
 BEGIN 
 DELETE FROM ReservedFlights WHERE Reserved_Flights_ID = ID; 
 COMMIT; 
 END DeleteReservedFlights; 
END ReservedFlightsPackage;


CREATE OR REPLACE PACKAGE Testimonial_Package
AS
PROCEDURE GetAllTestimonials;
PROCEDURE GetTestimonialById(ID IN INT);
PROCEDURE CreateTestimonial(Testi_Name  IN Testimonial.Name%TYPE, Testi_Feedback IN Testimonial.Feedback%TYPE,  Testi_status IN Testimonial.status%TYPE  ,UserId IN int);
PROCEDURE UpdateTestimonial(ID IN INT,Testi_Name  IN Testimonial.Name%TYPE, Testi_Feedback IN Testimonial.Feedback%TYPE,  Testi_status IN Testimonial.status%TYPE ,UserId IN int);
PROCEDURE DeleteTestimonial(ID IN INT);
END Testimonial_Package;



create or replace Package BODY Testimonial_Package
As
PROCEDURE GetAllTestimonials
As
cur_all SYS_REFCURSOR ;
Begin 
open cur_all for
Select * From Testimonial ;
Dbms_sql.return_result(cur_all);
End GetAllTestimonials ;


PROCEDURE GetTestimonialById(ID IN INT) 
As
Cur_item SYS_REFCURSOR;
Begin
open cur_item for
select * from Testimonial
where Testimonial_ID = ID;
Dbms_sql.return_result(cur_item);
End GetTestimonialById;

PROCEDURE CreateTestimonial(Testi_Name  IN Testimonial.Name%TYPE, Testi_Feedback IN Testimonial.Feedback%TYPE,  Testi_status IN Testimonial.status%TYPE ,UserId IN int)
AS
id number;
BEGIN 
INSERT INTO Testimonial VALUES (DEFAULT , Testi_Name , Testi_Feedback , Testi_status,UserId  );
COMMIT;
END CreateTestimonial;

PROCEDURE UpdateTestimonial(ID IN INT,Testi_Name  IN Testimonial.Name%TYPE, Testi_Feedback IN Testimonial.Feedback%TYPE,  Testi_status IN Testimonial.status%TYPE ,UserId IN int)
AS
BEGIN
UPDATE Testimonial  
SET Name=Testi_Name,Feedback=Testi_Feedback,status=Testi_status,User_ID=UserId
WHERE Testimonial_ID = ID ;
COMMIT;
END UpdateTestimonial;

PROCEDURE DeleteTestimonial(ID IN INT)
As
Begin
delete from Testimonial
where Testimonial_ID = ID  ;
commit;
End DeleteTestimonial;

End Testimonial_Package;

